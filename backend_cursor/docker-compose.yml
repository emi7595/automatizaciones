# WhatsApp Automation MVP - Docker Compose for Development
version: '3.12'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: automatizaciones_postgres
    environment:
      POSTGRES_DB: automatizaciones
      POSTGRES_USER: automatizaciones_user
      POSTGRES_PASSWORD: automatizaciones_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U automatizaciones_user -d automatizaciones"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - automatizaciones_network

  # Redis for Background Tasks
  redis:
    image: redis:7-alpine
    container_name: automatizaciones_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - automatizaciones_network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: automatizaciones_backend
    environment:
      # Database
      DATABASE_URL: postgresql://automatizaciones_user:automatizaciones_password@postgres:5432/automatizaciones
      
      # Redis
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379
      CELERY_RESULT_BACKEND: redis://redis:6379
      
      # Application
      DEBUG: "true"
      ENVIRONMENT: "development"
      SECRET_KEY: "development-secret-key-change-in-production"
      
      # CORS
      ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:3001"
      
      # WhatsApp (placeholder values for development)
      WHATSAPP_TOKEN: "your_whatsapp_token_here"
      PHONE_NUMBER_ID: "your_phone_number_id_here"
      BUSINESS_ID: "your_business_id_here"
      WEBHOOK_VERIFY_TOKEN: "your_webhook_verify_token_here"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app:ro  # Mount for development hot-reload
      - ./logs:/app/logs  # Mount logs directory
    networks:
      - automatizaciones_network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: automatizaciones_celery_worker
    command: celery -A app.core.celery worker --loglevel=info
    environment:
      # Database
      DATABASE_URL: postgresql://automatizaciones_user:automatizaciones_password@postgres:5432/automatizaciones
      
      # Redis
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379
      CELERY_RESULT_BACKEND: redis://redis:6379
      
      # Application
      DEBUG: "true"
      ENVIRONMENT: "development"
      SECRET_KEY: "development-secret-key-change-in-production"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app:ro
    networks:
      - automatizaciones_network
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: automatizaciones_celery_beat
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      # Database
      DATABASE_URL: postgresql://automatizaciones_user:automatizaciones_password@postgres:5432/automatizaciones
      
      # Redis
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379
      CELERY_RESULT_BACKEND: redis://redis:6379
      
      # Application
      DEBUG: "true"
      ENVIRONMENT: "development"
      SECRET_KEY: "development-secret-key-change-in-production"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app:ro
    networks:
      - automatizaciones_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  automatizaciones_network:
    driver: bridge
