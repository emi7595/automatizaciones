version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: automatizaciones_backend
    environment:
      # Database
      DATABASE_URL: postgresql://automatizaciones_user:automatizaciones_password@postgres:5432/automatizaciones
      
      # Redis
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379
      CELERY_RESULT_BACKEND: redis://redis:6379
      
      # Application
      DEBUG: "true"
      ENVIRONMENT: "development"
      SECRET_KEY: "development-secret-key-change-in-production"
      
      # WhatsApp (placeholder values for development)
      WHATSAPP_TOKEN: "your_whatsapp_token_here"
      PHONE_NUMBER_ID: "your_phone_number_id_here"
      BUSINESS_ID: "your_business_id_here"
      WEBHOOK_VERIFY_TOKEN: "your_webhook_verify_token_here"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - automatizaciones_network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: ./backend-worker
      dockerfile: Dockerfile
    container_name: automatizaciones_worker
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    environment:
      # Database
      DATABASE_URL: postgresql://automatizaciones_user:automatizaciones_password@postgres:5432/automatizaciones
      
      # Redis
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379
      CELERY_RESULT_BACKEND: redis://redis:6379
      
      # Application
      DEBUG: "true"
      ENVIRONMENT: "development"
      SECRET_KEY: "development-secret-key-change-in-production"
      
      # Backend API
      BACKEND_API_URL: "http://backend:8000"
      
      # WhatsApp (placeholder values for development)
      WHATSAPP_TOKEN: "your_whatsapp_token_here"
      PHONE_NUMBER_ID: "your_phone_number_id_here"
      BUSINESS_ID: "your_business_id_here"
      WEBHOOK_VERIFY_TOKEN: "your_webhook_verify_token_here"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    volumes:
      - ./backend-worker/logs:/app/logs
    networks:
      - automatizaciones_network
    restart: unless-stopped
    command: celery -A app.core.celery worker --loglevel=info --concurrency=2 --max-memory-per-child=200000 --queues=automation,messages,analytics

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: ./backend-worker
      dockerfile: Dockerfile
    container_name: automatizaciones_beat
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    environment:
      # Database
      DATABASE_URL: postgresql://automatizaciones_user:automatizaciones_password@postgres:5432/automatizaciones
      
      # Redis
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379
      CELERY_RESULT_BACKEND: redis://redis:6379
      
      # Application
      DEBUG: "true"
      ENVIRONMENT: "development"
      SECRET_KEY: "development-secret-key-change-in-production"
      
      # Backend API
      BACKEND_API_URL: "http://backend:8000"
      
      # WhatsApp (placeholder values for development)
      WHATSAPP_TOKEN: "your_whatsapp_token_here"
      PHONE_NUMBER_ID: "your_phone_number_id_here"
      BUSINESS_ID: "your_business_id_here"
      WEBHOOK_VERIFY_TOKEN: "your_webhook_verify_token_here"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    volumes:
      - ./backend-worker/logs:/app/logs
    networks:
      - automatizaciones_network
    restart: unless-stopped
    command: celery -A app.core.celery beat --loglevel=info

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: automatizaciones_postgres
    environment:
      POSTGRES_DB: automatizaciones
      POSTGRES_USER: automatizaciones_user
      POSTGRES_PASSWORD: automatizaciones_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U automatizaciones_user -d automatizaciones"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - automatizaciones_network

  # Redis Message Broker
  redis:
    image: redis:7-alpine
    container_name: automatizaciones_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - automatizaciones_network

volumes:
  postgres_data:
  redis_data:

networks:
  automatizaciones_network:
    driver: bridge
